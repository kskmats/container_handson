AWSTemplateFormatVersion: '2010-09-09'
Description: 'Ubuntu 22.04 EC2 instance with VPC, Security Group, and Key Pair for SSH access'

Parameters:
  KeyPairName:
    Type: String
    Default: 'Container-Handson-keypair-new'
    Description: 'Name for the EC2 Key Pair'
  
  InstanceType:
    Type: String
    Default: 't3.small'
    Description: 'EC2 instance type'
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
  
  SSHLocation:
    Type: String
    Default: '0.0.0.0/0'
    Description: 'IP address range that can SSH to the EC2 instance'
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: 'Must be a valid IP CIDR range of the form x.x.x.x/x'

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: 'Container-Handson-VPC'

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: 'Container-Handson-IGW'

  # Attach Internet Gateway to VPC
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Public Subnet
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: '10.0.1.0/24'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: 'Container-Handson-Public-Subnet'

  # Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: 'Container-Handson-Public-RouteTable'

  # Default Route
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  # Associate Route Table with Subnet
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  # Security Group
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: 'Container-Handson-SecurityGroup'
      GroupDescription: 'Security group for Ubuntu EC2 instance'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
          Description: 'SSH access'
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
          Description: 'HTTP access'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'
          Description: 'HTTPS access'
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: '0.0.0.0/0'
          Description: 'All outbound traffic'
      Tags:
        - Key: Name
          Value: 'Container-Handson-SecurityGroup'

  # IAM Role for EC2 to use Session Manager
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 'Container-Handson-EC2-Role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Tags:
        - Key: Name
          Value: 'Container-Handson-EC2-Role'

  # Instance Profile for EC2
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: 'Container-Handson-EC2-InstanceProfile'
      Roles:
        - !Ref EC2Role

  # Using existing imported key pair

  # EC2 Instance
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: 'ami-0244ef75e95122fd9'  # Ubuntu 22.04 LTS
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      IamInstanceProfile: !Ref EC2InstanceProfile
      VpcId: !Ref VPC
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -e
          
          # パッケージマネージャーのロック待機
          while sudo fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do
            echo "Waiting for other package managers to finish..."
            sleep 5
          done
          
          # システムアップデート
          apt-get update
          apt-get install -y apt-transport-https ca-certificates curl software-properties-common jq
          
          # SSM Agent のインストールと設定（Ubuntu 22.04には通常プリインストール済み）
          snap install amazon-ssm-agent --classic
          systemctl enable snap.amazon-ssm-agent.amazon-ssm-agent.service
          systemctl start snap.amazon-ssm-agent.amazon-ssm-agent.service
          
          # Docker インストール（新しい方法）
          install -m 0755 -d /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          chmod a+r /etc/apt/keyrings/docker.asc
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
          apt-get update
          apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
          
          # ユーザーをdockerグループに追加
          usermod -aG docker ubuntu
          
          # コンテナハンズオンに必要なパッケージ
          apt-get install -y cgdb cgroup-tools util-linux iproute2 iptables
          apt-get install -y build-essential git pkg-config
          
          # libcap のビルドとインストール
          git clone https://git.kernel.org/pub/scm/libs/libcap/libcap.git /usr/src/libcap
          cd /usr/src/libcap
          make clean
          make
          make install
          ldconfig
          
          # Docker サービス開始
          systemctl enable docker
          systemctl start docker
          
          # SSM Agent の状態確認
          systemctl status snap.amazon-ssm-agent.amazon-ssm-agent.service

      Tags:
        - Key: Name
          Value: 'Container-Handson-EC2'

Outputs:
  VPCId:
    Description: 'ID of the VPC'
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPC-ID'

  PublicSubnetId:
    Description: 'ID of the public subnet'
    Value: !Ref PublicSubnet
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet-ID'

  SecurityGroupId:
    Description: 'ID of the security group'
    Value: !Ref InstanceSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroup-ID'

  InstanceId:
    Description: 'ID of the EC2 instance'
    Value: !Ref EC2Instance
    Export:
      Name: !Sub '${AWS::StackName}-Instance-ID'

  InstancePublicIP:
    Description: 'Public IP address of the EC2 instance'
    Value: !GetAtt EC2Instance.PublicIp
    Export:
      Name: !Sub '${AWS::StackName}-Instance-PublicIP'

  InstancePublicDNS:
    Description: 'Public DNS name of the EC2 instance'
    Value: !GetAtt EC2Instance.PublicDnsName
    Export:
      Name: !Sub '${AWS::StackName}-Instance-PublicDNS'

  KeyPairName:
    Description: 'Name of the Key Pair'
    Value: !Ref KeyPairName
    Export:
      Name: !Sub '${AWS::StackName}-KeyPair-Name'

  SSHCommand:
    Description: 'SSH command to connect to the instance'
    Value: !Sub 'ssh -i container-handson-key.pem ubuntu@${EC2Instance.PublicIp}'

  SessionManagerCommand:
    Description: 'AWS CLI command to connect via Session Manager'
    Value: !Sub 'aws ssm start-session --target ${EC2Instance} --region ap-northeast-1'

  IAMRoleArn:
    Description: 'ARN of the IAM Role for EC2'
    Value: !GetAtt EC2Role.Arn
    Export:
      Name: !Sub '${AWS::StackName}-IAMRole-ARN'




